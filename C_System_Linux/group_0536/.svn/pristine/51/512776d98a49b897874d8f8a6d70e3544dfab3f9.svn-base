#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/signal.h>
#include "utils.h"
#ifndef PORT
	#define PORT 57759
#endif 
#define MAX_NAME 128
#define BUFFER_SIZE 128

typedef struct client {

	int fd; //file descriptor to write into and to read from
	int *answers;
	//before user entered a name, he cannot issue commands
	int state;
	char name [MAX_NAME];
	char buf [BUFFER_SIZE]; // each client has its own buffer
	int inbuf; // and a pointer to the current end-of-buf position
	struct in_addr ipaddr;

	struct client *next;

} Client;

int client_count = 0; 

Client* cc_ptr = NULL; 
Client* connected_client_head = NULL;


//This is the head of the list

//This is the global varaible 

void add_client (int fd, struct in_addr sin_addr) {
	struct client *c = malloc(sizeof(struct client));
    if (!c) {
	fprintf(stderr, "out of memory!\n");  /* highly unlikely to happen */
	exit(1);
    }
    printf("Adding client %s\n", inet_ntoa(sin_addr));
    fflush(stdout);
    c->fd = fd;
    c->ipaddr = sin_addr;
    
	// Spawn a new clinet struct

    if(cc_ptr == NULL){
    	cc_ptr = c; 
    	connected_client_head = c;
    }
    else {
    	cc_ptr -> next = c;
    	cc_ptr = cc_ptr->next;
    }
   

    
}

int setup (void) {
	int on = 1;
	struct sockaddr_in self;
	int listenfd;
	if ( (listenfd = socket (AF_INET, SOCK_STREAM, 0)) == -1 ){
		perror("socket");
		exit(1);
	}
	// Make sure we can reuse the port immediately after the server terminates
	if (setsockopt (listenfd, SOL_SOCKET, SO_REUSEADDR , 
		&on, sizeof(on)) == -1 ) {
		perror("setsockopt -- SO_REUSEADDR");
	}
 
	memset(&self, '\0', sizeof(self)); //
	self.sin_family = AF_INET;
	self.sin_addr.s_addr = INADDR_ANY;
	self.sin_port = htons(PORT);
	printf("Listening on %d\n", PORT);

	if (bind(listenfd, (struct sockaddr *) &self, sizeof(self)) == -1 ) {
		perror("bind");
		exit(1);
	}
	if (listen(listenfd, 5) == -1){
		perror("listen");
		exit(1);
	}
	return listenfd;
}

int find_network_newline (char *buf, int inbuf) { 
	 int i;
     for (i = 0; i < inbuf - 1; i++)
         if ((buf[i] == '\r') && (buf[i + 1] == '\n'))
           	return i
	return -1; 
}

int main(void) {

	int listenfd;
	int fd, nbytes;
	struct sockaddr_in r;
	socklen_t socklen;
	char buf[BUFFER_SIZE];

	listenfd = setup();
	while (1) {
		socklen = sizeof(r);
		if ( (fd = accept(listenfd, (struct sockaddr *)&r, &socklen)) < 0){
			perror("accept");
		} else {
			printf("New connection on port %d\n", ntohs(r.sin_port));

			add_client (fd, r.sin_addr);
			//read message from the server
			while ((nbytes = read(fd, buf, sizeof(buf)-1 )) > 0) {
				

				buf[nbytes] = '\0';
				

				printf("Next message: %s\n", buf);
				nbytes = write(fd, buf, strlen(buf));
			}
			close(fd);
		}
	}




}