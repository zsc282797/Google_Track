#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>

typedef struct client {

	int fd; //file descriptor to write into and to read from
	int *answers;
	//before user entered a name, he cannot issue commands
	int state;
	char name [MAX_NAME];
	char buf [BUFFER_SIZE]; // each client has its own buffer
	int inbuf; // and a pointer to the current end-of-buf position
	struct client *next;

} Client;

Client* connected_clients; 
//This is the global varaible 

#ifdef PORT
	#define PORT 57758
#endif 

int setup (void) {
	int on = 1;
	struct sockaddr_in self;
	int listenfd;
	if ( (listenfd = socket (AF_INET, SOCK_STREAM, 0)) == -1 ){
		perror("socket");
		exit(1);
	}
	// Make sure we can reuse the port immediately after the server terminates
	if (setsockopt (listenfd, SOL_SOCKET, SO_REUSEADDR , 
		&on, sizeof(on)) == -1 ) {
		perror("setsockopt -- SO_REUSEADDR");
	}
 
	memset(&self, '\0', sizeof(self)); //
	self.sin_family = AF_INET;
	self.sin_addr.s_addr = INADDR_ANY;
	self.sin_port = htons(PORT);
	printf("Listening on %d\n", PORT);

	if (bind(listenfd, (struct sockaddr *) &self, sizeof(self)) == -1 ) {
		perror("bind");
		exit(1);
	}
	if (listen(listenfd, 5) == -1){
		perror("listen");
		exit(1);
	}
	return listenfd;
}

int main(void) {

	int listenfd;
	int fd, nbytes;
	struct sockaddr_in peer;
	socklen_t socklen;
	char buf[20];

	listenfd = setup();
	while (1) {
		socklen = sizeof(peer);
		if ( (fd = accept(listenfd, (struct sockaddr *)&peer, &socklen)) < 0){
			perror("accept");
		} else {
			printf("New connection on port %d\n", ntohs(peer.sin_port));

			//read message from the server
			while ((nbytes = read(fd, buf, sizeof(buf)-1 )) > 0) {
				buf[nbytes] = '\0';
				printf("Next message: %s\n", buf);
			}
			close(fd);
		}
	}




}