#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>
#include "utils.h"
#include "qtree.h"
#include <sys/select.h>


char *question_prompt = "Do you like %s? (y/n)\n";
char *neg_result = "Sorry, no users with similar interests joined yet\n\n";
char *pos_result1 = "friend recommendation for user %s:\n";
char *pos_result2 = "You have total %d potential friend(s)!!!\n\n";
char answer[10];

int validate_answer(char *answer){
    char *invalid_message = "ERROR: Answer must be one of 'y', 'n', 'q'.\n";
    
    if (strlen(answer) > 3){
        printf("%s", invalid_message);
        return 2;
    }
    
    if (answer[0] == 'q' || answer[0] == 'Q')
        //wrap_up();
        return -1;
        
    if (answer[0] == 'n' || answer[0] == 'N')
        return 0;
        
    if (answer[0] == 'y' || answer[0] == 'Y')
        return 1;
        
    printf("%s", invalid_message);
    return 2;
}


//All above are the functions that helps impelemnet the A2 





/*
 * Print a formatted error message to stderr.
 */
void error(char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
}
/*
* helper to get the size of the interests
*/
int len_interests(Node *interests){
    Node* curr;
    curr = interests;
    if (curr == NULL)
        return 0;
    else {
        int count = 0;
        while (curr!=NULL){
            count += 1;
            curr = curr->next;
        }
        
        return count; 
    }
}
/*
 * Read and process commands
 */
int process_args(int cmd_argc, char **cmd_argv, QNode **root, Node *interests,
		 struct client *current_client, struct client *head) {
	
	//UNCOMMENT THIS !
	//QNode *qtree = *root;

    int nbytes;
        int len_int;
        char* test_greet = "Collecting your interests\n";
        char* complete = "Test complete.\n";
	   len_int = len_interests(interests);
    if (cmd_argc <= 0) {
		return 0;

	} else if (strcmp(cmd_argv[0], "quit") == 0 && cmd_argc == 1) {
		/* Return an appropriate value to denote that the specified
		 * user is now need to be disconnected. */
		printf("Client is being disconnected! \n");
		printf("Removing client %s\n", inet_ntoa(current_client->ipaddr));

		if (current_client -> prev == NULL){
			head = current_client -> next;
		}
		else {
		current_client -> prev -> next = current_client -> next;
		}
		close(current_client->fd);
		free(current_client);

		return -1;

	} else if (strcmp(cmd_argv[0], "do_test") == 0 && cmd_argc == 1) {
		/* The specified user is ready to start answering questions. You
		 * need to make sure that the user answers each question only
		 * once.
		 */
		

		nbytes = write(current_client->fd, test_greet, strlen(test_greet));
		char* name = current_client->name;
		printf("Debug: name is %s\n",name);
        
        printf("Debug: intersts list has %d question \n",len_int);
        current_client -> answers = malloc (sizeof(int) * len_int);

		Node *user_list = find_user(*root, name);
        //int idx = 0;
        if (!user_list){
            // find the list of friends to which the user should be attached
            //printf("We got null from user_list\n");
            
            QNode *prev, *curr;
            prev = curr = *root;
        
            // iterate over list of interests
            Node *i = interests;
            int ans;
            int idx = 0;
            while (i!=NULL){
                //printf(question_prompt, i->str);
                char question[128];
                sprintf(question, question_prompt, i->str);
                //char* question = strcat(question_prompt, i->str);
                nbytes = write(current_client->fd, question, strlen(question));
                
                // read answer to prompt
                //scanf("%s", answer);
                fd_set fdlist;
                FD_ZERO(&fdlist);
                FD_SET(current_client->fd, &fdlist);
                while(1){
                	
                	if (select((current_client->fd)+1, &fdlist,NULL,NULL,NULL)>0 ){
                		
                		nbytes = read(current_client->fd, answer,sizeof(answer));
                		break; 

                	}

                }
                
           
                
                ans = validate_answer(answer);
                current_client -> answers[idx] = ans;
                idx++;
                // if answer if not valid, continue to loop
                if (ans == 2) {
                	char* invalid_message = "ERROR: Answer must be one of 'y', 'n', 'q'.\n";
                	nbytes = write(current_client->fd, invalid_message, strlen(invalid_message));
                    continue;}
                if (ans == -1)
                	exit(1);    
                prev = curr;
                curr = find_branch(curr, ans);
				
				
                i = i -> next;
            }
            nbytes = write(current_client->fd, complete, strlen(complete));
            
            // add user to the end of the list
            user_list = prev->children[ans].fchild;
            prev->children[ans].fchild = add_user(user_list, name);
        }


	} else if (strcmp(cmd_argv[0], "get_all") == 0 && cmd_argc == 1) {
		/* Send the list of best mismatches related to the specified
		 * user. If the user has not taked the test yet, return the
		 * corresponding error value (different than 0 and -1).
		 */
        
        
        printf("Looking at current_client's name: %s\n",current_client->name);
        for (int i=0; i<len_int; i++){
            printf("Answer[%d] = %d \n",i,current_client->answers[i]);
        }
        

	} else if (strcmp(cmd_argv[0], "post") == 0 && cmd_argc == 3) {
		/* Send the specified message stored in cmd_argv[2] to the user
		 * stored in cmd_argv[1].
		 */
	}
	else {
		/* The input message is not properly formatted. */
		error("Incorrect syntax");
	}
	return 0;
}

/*
 * Tokenize the command stored in cmd.
 * Return the number of tokens, and store the tokens in cmd_argv.
 */
int tokenize(char *cmd, char **cmd_argv) {
    int cmd_argc = 0;
    char *next_token = strtok(cmd, DELIM);
    while (next_token != NULL) {
        if (cmd_argc == (INPUT_ARG_MAX_NUM - 1)) {
	    cmd_argv[cmd_argc] = strtok(NULL, "");
            break;
        }
        cmd_argv[cmd_argc] = next_token;
        cmd_argc++;
        next_token = strtok(NULL, DELIM);
    }

    return cmd_argc;
}